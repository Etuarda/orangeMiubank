// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum para tipos de conta
enum AccountType {
  CORRENTE
  INVESTIMENTO
}

// Enum para tipos de ativo (ações, CDB, Tesouro Direto)
enum AssetType {
  ACAO
  CDB
  TESOURO_DIRETO
}

// Enum para tipos de movimentação
enum MovementType {
  DEPOSITO
  SAQUE
  TRANSFERENCIA_INTERNA
  TRANSFERENCIA_EXTERNA
  COMPRA_ATIVO
  VENDA_ATIVO
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  cpf       String    @unique // Adicionado
  birthDate DateTime  // Adicionado
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  accounts   Account[]
  investments Investment[] // Relação com Investments
  pet        Pet? // Um usuário pode ter um pet (opcional)
}

model Account {
  id        String      @id @default(uuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  type      AccountType // Tipo da conta: CORRENTE ou INVESTIMENTO
  balance   Decimal     @default(0.00) @db.Decimal(10, 2) // Saldo com precisão de 2 casas decimais
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Para registrar o histórico de movimentações da conta
  movementsFrom Movement[] @relation("FromAccount")
  movementsTo   Movement[] @relation("ToAccount")
}

model Asset {
  id            String      @id @default(uuid())
  symbol        String?     @unique // Símbolo da ação (e.g., BOIB3). Opcional para renda fixa.
  name          String
  type          AssetType   // Tipo do ativo: ACAO, CDB, TESOURO_DIRETO (ADICIONADO)
  currentPrice  Decimal     @db.Decimal(10, 2) // Preço atual do ativo
  description   String?     // ADICIONADO
  rate          Decimal?    @db.Decimal(5, 4) // Taxa de rendimento (e.g., 0.12 para 12%) (ADICIONADO)
  rateType      String?     // Tipo da taxa: 'pre' ou 'pos' (ADICIONADO)
  maturity      DateTime?   // Data de vencimento (ADICIONADO)
  minimumInvestment Decimal? @db.Decimal(10, 2) // Investimento mínimo (para RF) (ADICIONADO)
  lastUpdate    DateTime    @default(now()) @updatedAt // Para simular variação de preço

  investments   Investment[]
}

model Investment {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  assetId     String
  asset       Asset    @relation(fields: [assetId], references: [id])
  quantity    Decimal  @db.Decimal(10, 4) // Quantidade de ativos (e.g., número de ações, ou valor nominal para RF)
  purchasePrice Decimal  @db.Decimal(10, 2) // Preço por unidade ou valor total de compra
  purchaseDate DateTime @default(now())
  isSold      Boolean  @default(false)
  salePrice   Decimal? @db.Decimal(10, 2) // Preço por unidade no momento da venda
  saleDate    DateTime?
  // Campos para lucro/imposto podem ser calculados dinamicamente ou adicionados aqui, se for guardar no BD
  profit      Decimal? @db.Decimal(10, 2) // Lucro ou prejuízo (já descontando taxas/impostos se aplicável)
  taxPaid     Decimal? @db.Decimal(10, 2) // Imposto de renda pago na venda
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  movements   Movement[] // Relação com Movements
}

model Movement {
  id            String       @id @default(uuid())
  fromAccountId String
  toAccountId   String
  amount        Decimal      @db.Decimal(10, 2)
  type          MovementType // Tipo da movimentação
  description   String?      // Descrição adicional (ex: "Taxa de transferência")
  createdAt     DateTime     @default(now())
  
  fromAccount   Account      @relation("FromAccount", fields: [fromAccountId], references: [id])
  toAccount     Account      @relation("ToAccount", fields: [toAccountId], references: [id])

  // Vincular a um investimento (opcional, para compra/venda)
  investmentId  String?
  investment    Investment?  @relation(fields: [investmentId], references: [id])
}

model Pet {
  id          String    @id @default(uuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  mood        Int       @default(3) // Nível de humor do pet (ex: 1 a 5)
  savedThisMonth Decimal  @default(0.00) @db.Decimal(10, 2) // Quantidade economizada este mês (para gamificação)
  lastUpdate  DateTime  @default(now()) // Última atualização do humor/economia
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FinancialTip {
  id          String   @id @default(uuid())
  title       String
  description String
  example     String?
  source      String?
  category    String? // Ex: "Renda Fixa", "Ações", "Economia", "Comportamento"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}