generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  CORRENTE
  INVESTIMENTO
}

enum AssetType {
  ACAO
  CDB
  TESOURO_DIRETO
}

enum MovementType {
  DEPOSITO
  SAQUE
  TRANSFERENCIA_INTERNA
  TRANSFERENCIA_EXTERNA
  COMPRA_ATIVO
  VENDA_ATIVO
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String
  cpf          String        @unique
  birthDate    DateTime
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  accounts     Account[]
  investments  Investment[]
  pet          Pet?
}

model Account {
  id             String       @id @default(uuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  type           AccountType
  balance        Decimal      @default(0.00) @db.Decimal(10, 2)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  movementsFrom  Movement[]   @relation("FromAccount")
  movementsTo    Movement[]   @relation("ToAccount")
}

model Asset {
  id                  String        @id @default(uuid())
  symbol              String?       @unique
  name                String
  type                AssetType
  currentPrice        Decimal       @db.Decimal(10, 2)
  description         String?
  rate                Decimal?      @db.Decimal(5, 4)
  rateType            String?
  maturity            DateTime?
  minimumInvestment   Decimal?      @db.Decimal(10, 2)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  investments         Investment[]
}

model Investment {
  id            String      @id @default(uuid())
  userId        String
  assetId       String
  user          User        @relation(fields: [userId], references: [id])
  asset         Asset       @relation(fields: [assetId], references: [id])
  quantity      Int
  buyPrice      Decimal     @db.Decimal(10, 2)
  buyDate       DateTime    @default(now())
  sellPrice     Decimal?    @db.Decimal(10, 2)
  sellDate      DateTime?
  profit        Decimal?    @db.Decimal(10, 2)
  taxPaid       Decimal?    @db.Decimal(10, 2)
  isSold        Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  movementLinks Movement[]  @relation("InvestmentRelation")
}

model Movement {
  id             String        @id @default(uuid())
  fromAccountId  String
  toAccountId    String
  amount         Decimal       @db.Decimal(10, 2)
  type           MovementType
  description    String?
  createdAt      DateTime      @default(now())
  investmentId   String?

  fromAccount    Account       @relation("FromAccount", fields: [fromAccountId], references: [id])
  toAccount      Account       @relation("ToAccount", fields: [toAccountId], references: [id])
  investment     Investment?   @relation("InvestmentRelation", fields: [investmentId], references: [id])
}

model Pet {
  id              String     @id @default(uuid())
  userId          String     @unique
  mood            Int        @default(3)
  savedThisMonth  Decimal    @default(0.00) @db.Decimal(10, 2)
  lastUpdate      DateTime   @default(now())
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  user            User       @relation(fields: [userId], references: [id])
}

model FinancialTip {
  id          String     @id @default(uuid())
  title       String
  description String
  example     String?
  source      String?
  category    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}
