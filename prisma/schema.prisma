// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum para tipos de conta
enum AccountType {
  CORRENTE
  INVESTIMENTO
}

// Enum para tipos de ativo (ações, CDB, Tesouro Direto)
enum AssetType {
  ACAO
  CDB
  TESOURO_DIRETO
}

// Enum para tipos de movimentação
enum MovementType {
  DEPOSITO
  SAQUE
  TRANSFERENCIA_INTERNA
  TRANSFERENCIA_EXTERNA
  COMPRA_ATIVO
  VENDA_ATIVO
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  cpf       String    @unique
  birthDate DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  points    Int       @default(0) // Novo campo para gamificação: pontos do usuário

  accounts     Account[]
  investments  Investment[]
  pet          Pet?
  financialGoals FinancialGoal[] // Relacionamento com metas financeiras
}

model Account {
  id        String      @id @default(uuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  type      AccountType
  balance   Decimal     @default(0.00) @db.Decimal(10, 2)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  movementsFrom Movement[] @relation("FromAccount")
  movementsTo   Movement[] @relation("ToAccount")
}

model Asset {
  id                String      @id @default(uuid())
  symbol            String?     @unique
  name              String
  type              AssetType
  currentPrice      Decimal     @db.Decimal(10, 2)
  description       String?
  rate              Decimal?    @db.Decimal(5, 4)
  rateType          String?
  maturity          DateTime?
  minimumInvestment Decimal?   @db.Decimal(10, 2)
  lastUpdate        DateTime    @default(now()) @updatedAt

  investments       Investment[]
}

model Investment {
  id             String    @id @default(uuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  assetId        String
  asset          Asset     @relation(fields: [assetId], references: [id])
  quantity       Decimal   @db.Decimal(10, 4)
  purchasePrice  Decimal   @db.Decimal(10, 2)
  purchaseDate   DateTime  @default(now())
  isSold         Boolean   @default(false)
  salePrice      Decimal?  @db.Decimal(10, 2)
  saleDate       DateTime?
  profit         Decimal?  @db.Decimal(10, 2)
  taxPaid        Decimal?  @db.Decimal(10, 2)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  movements      Movement[]
}

model Movement {
  id            String       @id @default(uuid())
  fromAccountId String
  toAccountId   String
  amount        Decimal      @db.Decimal(10, 2)
  type          MovementType
  description   String?
  createdAt     DateTime     @default(now())

  fromAccount   Account      @relation("FromAccount", fields: [fromAccountId], references: [id])
  toAccount     Account      @relation("ToAccount", fields: [toAccountId], references: [id])

  investmentId  String?
  investment    Investment?  @relation(fields: [investmentId], references: [id])
}

model Pet {
  id              String    @id @default(uuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id])
  mood            Int       @default(3)
  savedThisMonth  Decimal   @default(0.00) @db.Decimal(10, 2)
  lastUpdate      DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model FinancialTip {
  id          String   @id @default(uuid())
  title       String
  description String
  example     String?
  source      String?
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FinancialGoal {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  name          String   // Nome da meta (ex: "Viagem", "Notebook novo")
  targetAmount  Decimal  @db.Decimal(12, 2)126127128129130131132133134135136137138139140141142143144145146147148149150151152$0
  currentAmount Decimal  @default(0.00) @db.Decimal(12, 2)
  deadline      DateTime?
  isAchieved    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
